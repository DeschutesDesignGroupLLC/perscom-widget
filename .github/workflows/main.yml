name: Deploy Widget

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
  push:
    branches:
      - master
      - staging

jobs:
  deploy:
    name: Deploy Widget
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Determine Should Create Tag
        run: echo "PREVENT_TAG_CREATION=$( [ \"$GITHUB_REF\" != 'refs/heads/master' ] && [ \"$GITHUB_REF\" != 'refs/heads/staging' ] && echo 'true' || echo 'false' )" >> $GITHUB_ENV

      - name: Bump Application Version and Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          default_prerelease_bump: prerelease
          release_branches: master
          pre_release_branches: '*'
          append_to_pre_release_tag: prerelease
          dry_run: ${{ env.PREVENT_TAG_CREATION }}

      - name: Setup Vercel Preview
        if: github.ref != 'refs/heads/master'
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE}}
          echo SENTRY_RELEASE=${{ steps.tag_version.outputs.new_tag }} >> .vercel/.env.preview.local
          echo WIDGET_VERSION=${{ steps.tag_version.outputs.new_tag }} >> .vercel/.env.preview.local

      - name: Setup Vercel Production
        if: github.ref == 'refs/heads/master'
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE}}
          echo SENTRY_RELEASE=${{ steps.tag_version.outputs.new_tag }} >> .vercel/.env.production.local
          echo WIDGET_VERSION=${{ steps.tag_version.outputs.new_tag }} >> .vercel/.env.production.local

      - name: Build Widget Preview
        if: github.ref != 'refs/heads/master'
        run: npm run build:widget
        env:
          WIDGET_URL: https://staging.widget.perscom.io

      - name: Build Widget Production
        if: github.ref == 'refs/heads/master'
        run: npm run build:widget
        env:
          WIDGET_URL: https://widget.perscm.io

      - name: Build Project Artifacts Preview
        if: github.ref != 'refs/heads/master'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts Production
        if: github.ref == 'refs/heads/master'
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel Preview
        if: github.ref != 'refs/heads/master'
        run: echo "DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_ENV

      - name: Deploy Project Artifacts to Vercel Production
        if: github.ref == 'refs/heads/master'
        run: echo "DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_ENV

      - name: Add PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            **Vercel Deployment**
            
            âœ… Deployment Preview URL: [${{ env.DEPLOYMENT_URL }}](${{ env.DEPLOYMENT_URL }})

      - name: Create Sentry Release Staging
        if: github.ref == 'refs/heads/staging'
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: staging
          version: ${{ steps.tag_version.outputs.new_tag }}
          sourcemaps: ./dist ./build/static/js

      - name: Create Sentry Release Production
        if: github.ref == 'refs/heads/master'
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ steps.tag_version.outputs.new_tag }}
          sourcemaps: ./dist ./build/static/js

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          generateReleaseNotes: true
          makeLatest: true
          token: ${{ secrets.RELEASE_TOKEN }}
